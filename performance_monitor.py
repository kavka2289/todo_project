#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Todo App
"""
import time
import requests
import json
import statistics
from datetime import datetime
from typing import List, Dict, Any

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.results = []
    
    def measure_endpoint(self, endpoint: str, method: str = "GET", 
                        data: Dict[str, Any] = None, headers: Dict[str, str] = None,
                        iterations: int = 10) -> Dict[str, Any]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {method} {endpoint} ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...")
        
        response_times = []
        status_codes = []
        errors = []
        
        for i in range(iterations):
            try:
                start_time = time.time()
                
                if method.upper() == "GET":
                    response = requests.get(f"{self.base_url}{endpoint}", headers=headers)
                elif method.upper() == "POST":
                    response = requests.post(f"{self.base_url}{endpoint}", 
                                          json=data, headers=headers)
                elif method.upper() == "PUT":
                    response = requests.put(f"{self.base_url}{endpoint}", 
                                          json=data, headers=headers)
                elif method.upper() == "DELETE":
                    response = requests.delete(f"{self.base_url}{endpoint}", headers=headers)
                else:
                    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
                
                end_time = time.time()
                response_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                
                response_times.append(response_time)
                status_codes.append(response.status_code)
                
                if response.status_code >= 400:
                    errors.append({
                        "iteration": i + 1,
                        "status_code": response.status_code,
                        "response": response.text[:200]
                    })
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                errors.append({
                    "iteration": i + 1,
                    "error": str(e)
                })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if response_times:
            stats = {
                "endpoint": endpoint,
                "method": method,
                "iterations": iterations,
                "min_time": min(response_times),
                "max_time": max(response_times),
                "avg_time": statistics.mean(response_times),
                "median_time": statistics.median(response_times),
                "std_dev": statistics.stdev(response_times) if len(response_times) > 1 else 0,
                "success_rate": (len(response_times) - len(errors)) / len(response_times) * 100,
                "errors": errors,
                "status_codes": status_codes
            }
        else:
            stats = {
                "endpoint": endpoint,
                "method": method,
                "iterations": iterations,
                "errors": errors,
                "success_rate": 0
            }
        
        self.results.append(stats)
        return stats
    
    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        
        for result in self.results:
            print(f"\nüîó {result['method']} {result['endpoint']}")
            print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {result['iterations']}")
            
            if 'avg_time' in result:
                print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
                print(f"     –ú–∏–Ω–∏–º—É–º: {result['min_time']:.2f} –º—Å")
                print(f"     –ú–∞–∫—Å–∏–º—É–º: {result['max_time']:.2f} –º—Å")
                print(f"     –°—Ä–µ–¥–Ω–µ–µ: {result['avg_time']:.2f} –º—Å")
                print(f"     –ú–µ–¥–∏–∞–Ω–∞: {result['median_time']:.2f} –º—Å")
                print(f"     –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {result['std_dev']:.2f} –º—Å")
            
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.1f}%")
            
            if result['errors']:
                print(f"   –û—à–∏–±–∫–∏: {len(result['errors'])}")
                for error in result['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                    if 'status_code' in error:
                        print(f"     –ò—Ç–µ—Ä–∞—Ü–∏—è {error['iteration']}: HTTP {error['status_code']}")
                    else:
                        print(f"     –ò—Ç–µ—Ä–∞—Ü–∏—è {error['iteration']}: {error['error']}")
    
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"performance_results_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def run_basic_tests(self):
        """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("="*50)
        
        # –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        self.measure_endpoint("/", "GET")
        
        # –¢–µ—Å—Ç health check
        self.measure_endpoint("/health", "GET")
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        self.measure_endpoint("/info", "GET")
        
        # –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.measure_endpoint("/docs", "GET")
        
        # –¢–µ—Å—Ç OpenAPI —Å—Ö–µ–º—ã
        self.measure_endpoint("/openapi.json", "GET")
        
        # –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å 401)
        self.measure_endpoint("/api/v1/users/", "GET")
        self.measure_endpoint("/api/v1/todos/", "GET")
        self.measure_endpoint("/api/v1/categories/", "GET")
    
    def run_api_tests(self, auth_token: str = None):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        if not auth_token:
            print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã")
            return
        
        print("\nüîê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
        print("="*50)
        
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.measure_endpoint("/api/v1/users/me", "GET", headers=headers)
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.measure_endpoint("/api/v1/users/", "GET", headers=headers)
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        self.measure_endpoint("/api/v1/todos/", "GET", headers=headers)
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.measure_endpoint("/api/v1/categories/", "GET", headers=headers)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Todo App")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = PerformanceMonitor()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    monitor.run_basic_tests()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    monitor.print_results()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    monitor.save_results()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
