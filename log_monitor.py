#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ Todo App
"""
import os
import time
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any
import re

class LogMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, log_dir: str = "logs", log_pattern: str = "*.log"):
        self.log_dir = Path(log_dir)
        self.log_pattern = log_pattern
        self.log_files = []
        self.stats = {
            "total_entries": 0,
            "error_count": 0,
            "warning_count": 0,
            "info_count": 0,
            "debug_count": 0,
            "last_check": None,
            "new_entries": 0
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.log_dir.mkdir(exist_ok=True)
    
    def scan_log_files(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        self.log_files = list(self.log_dir.glob(self.log_pattern))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(self.log_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –≤ {self.log_dir}")
        
        for log_file in self.log_files:
            print(f"   - {log_file.name}")
    
    def parse_log_line(self, line: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        # –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤
        timestamp_pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:\.\d+)?)'
        level_pattern = r'(ERROR|WARNING|INFO|DEBUG)'
        message_pattern = r'(.*)'
        
        full_pattern = f"{timestamp_pattern}.*{level_pattern}.*{message_pattern}"
        match = re.match(full_pattern, line.strip())
        
        if match:
            timestamp_str, level, message = match.groups()
            try:
                timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            except ValueError:
                timestamp = datetime.now()
            
            return {
                "timestamp": timestamp,
                "level": level,
                "message": message.strip(),
                "raw_line": line.strip()
            }
        
        return {
            "timestamp": datetime.now(),
            "level": "UNKNOWN",
            "message": line.strip(),
            "raw_line": line.strip()
        }
    
    def analyze_log_file(self, log_file: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        file_stats = {
            "filename": log_file.name,
            "size": log_file.stat().st_size,
            "entries": 0,
            "errors": 0,
            "warnings": 0,
            "info": 0,
            "debug": 0,
            "last_modified": datetime.fromtimestamp(log_file.stat().st_mtime),
            "recent_entries": []
        }
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            file_stats["entries"] = len(lines)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-100:] if len(lines) > 100 else lines
            
            for line in recent_lines:
                if line.strip():
                    log_entry = self.parse_log_line(line)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
                    if log_entry["level"] == "ERROR":
                        file_stats["errors"] += 1
                        self.stats["error_count"] += 1
                    elif log_entry["level"] == "WARNING":
                        file_stats["warnings"] += 1
                        self.stats["warning_count"] += 1
                    elif log_entry["level"] == "INFO":
                        file_stats["info"] += 1
                        self.stats["info_count"] += 1
                    elif log_entry["level"] == "DEBUG":
                        file_stats["debug"] += 1
                        self.stats["debug_count"] += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    if len(file_stats["recent_entries"]) < 10:
                        file_stats["recent_entries"].append(log_entry)
                    
                    self.stats["total_entries"] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {log_file}: {e}")
        
        return file_stats
    
    def monitor_logs(self, interval: int = 30):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                self.scan_log_files()
                
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print("="*60)
                
                total_errors = 0
                total_warnings = 0
                
                for log_file in self.log_files:
                    file_stats = self.analyze_log_file(log_file)
                    
                    print(f"\nüìÑ {file_stats['filename']}")
                    print(f"   –†–∞–∑–º–µ—Ä: {file_stats['size']} –±–∞–π—Ç")
                    print(f"   –ó–∞–ø–∏—Å–µ–π: {file_stats['entries']}")
                    print(f"   –û—à–∏–±–∫–∏: {file_stats['errors']}")
                    print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {file_stats['warnings']}")
                    print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {file_stats['info']}")
                    print(f"   –û—Ç–ª–∞–¥–∫–∞: {file_stats['debug']}")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {file_stats['last_modified'].strftime('%Y-%m-%d %H:%M:%S')}")
                    
                    total_errors += file_stats['errors']
                    total_warnings += file_stats['warnings']
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    if file_stats['recent_entries']:
                        print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                        for entry in file_stats['recent_entries'][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                            level_icon = {
                                "ERROR": "‚ùå",
                                "WARNING": "‚ö†Ô∏è",
                                "INFO": "‚ÑπÔ∏è",
                                "DEBUG": "üîç"
                            }.get(entry["level"], "‚ùì")
                            
                            print(f"     {level_icon} {entry['timestamp'].strftime('%H:%M:%S')} [{entry['level']}] {entry['message'][:80]}")
                
                print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {self.stats['total_entries']}")
                print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
                print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if total_errors > 0:
                    print(f"üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_errors} –æ—à–∏–±–æ–∫!")
                
                if total_warnings > 0:
                    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
                
                self.stats["last_check"] = datetime.now()
                
                print(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def search_logs(self, query: str, level: str = None, hours: int = 24):
        """–ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö"""
        print(f"üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö: '{query}'")
        if level:
            print(f"   –£—Ä–æ–≤–µ–Ω—å: {level}")
        print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
        print("="*60)
        
        cutoff_time = datetime.now() - timedelta(hours=hours)
        found_entries = []
        
        for log_file in self.log_files:
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line_num, line in enumerate(f, 1):
                        if line.strip():
                            log_entry = self.parse_log_line(line)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                            if log_entry["timestamp"] < cutoff_time:
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                            if level and log_entry["level"] != level:
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                            if query.lower() in log_entry["message"].lower():
                                found_entries.append({
                                    "file": log_file.name,
                                    "line": line_num,
                                    "entry": log_entry
                                })
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                                level_icon = {
                                    "ERROR": "‚ùå",
                                    "WARNING": "‚ö†Ô∏è",
                                    "INFO": "‚ÑπÔ∏è",
                                    "DEBUG": "üîç"
                                }.get(log_entry["level"], "‚ùì")
                                
                                print(f"{level_icon} [{log_entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}] "
                                      f"[{log_entry['level']}] {log_entry['message']}")
                                print(f"   –§–∞–π–ª: {log_file.name}:{line_num}")
                                print()
                                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {log_file}: {e}")
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_entries)} –∑–∞–ø–∏—Å–µ–π")
        return found_entries
    
    def export_logs(self, filename: str = None, hours: int = 24):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"logs_export_{timestamp}.json"
        
        cutoff_time = datetime.now() - timedelta(hours=hours)
        export_data = {
            "export_time": datetime.now().isoformat(),
            "time_range_hours": hours,
            "cutoff_time": cutoff_time.isoformat(),
            "files": []
        }
        
        for log_file in self.log_files:
            file_data = {
                "filename": log_file.name,
                "entries": []
            }
            
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip():
                            log_entry = self.parse_log_line(line)
                            
                            if log_entry["timestamp"] >= cutoff_time:
                                file_data["entries"].append({
                                    "timestamp": log_entry["timestamp"].isoformat(),
                                    "level": log_entry["level"],
                                    "message": log_entry["message"]
                                })
                
                export_data["files"].append(file_data)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞ {log_file}: {e}")
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
        return filename


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä –ª–æ–≥–æ–≤ Todo App")
    parser.add_argument("--monitor", "-m", action="store_true", 
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    parser.add_argument("--interval", "-i", type=int, default=30,
                       help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)")
    parser.add_argument("--search", "-s", type=str,
                       help="–ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö")
    parser.add_argument("--level", "-l", type=str, choices=["ERROR", "WARNING", "INFO", "DEBUG"],
                       help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    parser.add_argument("--hours", type=int, default=24,
                       help="–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)")
    parser.add_argument("--export", "-e", action="store_true",
                       help="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON")
    
    args = parser.parse_args()
    
    monitor = LogMonitor()
    
    if args.search:
        monitor.scan_log_files()
        monitor.search_logs(args.search, args.level, args.hours)
    elif args.export:
        monitor.scan_log_files()
        monitor.export_logs(hours=args.hours)
    elif args.monitor:
        monitor.scan_log_files()
        monitor.monitor_logs(args.interval)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        monitor.scan_log_files()
        print("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–æ–≤:")
        print("="*40)
        
        for log_file in monitor.log_files:
            file_stats = monitor.analyze_log_file(log_file)
            print(f"üìÑ {file_stats['filename']}: {file_stats['entries']} –∑–∞–ø–∏—Å–µ–π")
        
        print(f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")


if __name__ == "__main__":
    main()
